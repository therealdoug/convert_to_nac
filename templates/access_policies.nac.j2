#jinja2: lstrip_blocks: True
---
{% import 'macro_handler.j2' as helper %}
{%- set accpolns = namespace(access_policies={}) %}
{%- set infra_children = polUni | selectattr('infraInfra', 'defined') | map(attribute='infraInfra') | selectattr('children', 'defined') | map(attribute='children') | flatten | list %}

{%- set pdomns = namespace(physical_domains=[]) -%}
{%- for dom in polUni | selectattr('physDomP', 'defined')
  | map(attribute='physDomP') | flatten | sort(attribute='attributes.name') %}
  {%- set pdomns.physical_domains = pdomns.physical_domains + [{
    'name': dom.attributes.name,
    'vlan_pool': [dom] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('infraRsVlanNs', 'defined') | map(attribute='infraRsVlanNs')
      | flatten | map(attribute='attributes') | map(attribute='tDn') | list
      | first | default('') | replace('uni/infra/vlanns-[', '')
      | replace(']-dynamic', '') | replace(']-static', ''),
    'security_domains': [dom] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('aaaDomainRef', 'defined')
      | map(attribute='aaaDomainRef.attributes.name') | default(''),
  }] %}
{%- endfor -%}
{%- set _= accpolns.access_policies.__setitem__('physical_domains', pdomns.physical_domains) -%}

{%- set rdomns = namespace(routed_domains=[]) -%}
{%- for dom in polUni | selectattr('l3extDomP', 'defined')
  | map(attribute='l3extDomP') | flatten | sort(attribute='attributes.name') %}
  {%- set rdomns.routed_domains = rdomns.routed_domains + [{
    'name': dom.attributes.name,
    'vlan_pool': [dom] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('infraRsVlanNs', 'defined') | map(attribute='infraRsVlanNs')
      | flatten | map(attribute='attributes') | map(attribute='tDn') | list
      | first | default('') | replace('uni/infra/vlanns-[', '')
      | replace(']-dynamic', '') | replace(']-static', ''),
    'security_domains': [dom] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('aaaDomainRef', 'defined')
      | map(attribute='aaaDomainRef.attributes.name') | default(''),
  }] %}
{% endfor -%}
{%- set _= accpolns.access_policies.__setitem__('routed_domains', rdomns.routed_domains) -%}

{%- set ptpns = namespace(ptp_profiles=[]) -%}
{%- for ptp in infra_children | selectattr('ptpProfile', 'defined')
  | map(attribute='ptpProfile') | list
  | sort(attribute='attributes.name') | default([]) %}
  {%- set ptpns.ptp_profiles = ptpns.ptp_profiles + [{
    'name': ptp.attributes.name,
    'announce_interval': ptp.attributes.announceIntvl | default('')
      | regex_replace('^1$', ''),
    'announce_timeout': ptp.attributes.announceTimeout | default('')
      | regex_replace('^3$', ''),
    'delay_interval': ptp.attributes.delayIntvl | default('')
      | regex_replace('^-3$', ''),
    'sync_interval': ptp.attributes.syncIntvl | default('')
      | regex_replace('^-3$', ''),
    'priority': ptp.attributes.localPriority | default('')
      | regex_replace('^128$', ''),
    'template': ptp.attributes.localPriority | default('')
      | replace('aes67', ''),
    'forwardable': 'false' if ptp.attributes.ptpoeDstMacType != "forwardable"
      else '' | default(''),
    'mismatch_handling': ptp.attributes.ptpoeDstMacRxNoMatch | default('')
      | replace('configured', '')
  }] %}
{% endfor %}
{%- set _= accpolns.access_policies.__setitem__('ptp_profiles',
  ptpns.ptp_profiles) -%}

{%- set qosns = namespace(qos={}) %}
{%- set _= qosns.qos.__setitem__('preserve_cos',
  'true' if infra_children | selectattr('qosInstPol', 'defined')
  | map(attribute='qosInstPol') | list
  | map(attribute='attributes.ctrl') != '' else '' | default('')) %}
{%- set qosclassns = namespace(qos_classes=[]) %}
{%- for class in infra_children | selectattr('qosInstPol', 'defined')
  | map(attribute='qosInstPol') | list
  | selectattr('children', 'defined') | map(attribute='children') | flatten
  | selectattr('qosClass', 'defined') | map(attribute='qosClass') | list
  | default('') %}
  {%- set qosclassns.qos_classes = qosclassns.qos_classes + [{
    'level': class.attributes.prio | replace('level', ''),
    'admin_state': 'false' if class.attributes.admin == 'disabled'
      else '' | default(''),
    'description': class.attributes.descr | default('') | regex_replace('^((?:.*\:.*))$', '"\\1"'),
    'mtu': class.attributes.mtu | default('')
      | replace('9216', ''),
    'scheduling': [class] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('qosSched', 'defined')
      | map(attribute='qosSched.attributes.meth')
      | first | default('') | replace('wrr', ''),
    'bandwidth_percent': [class] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('qosSched', 'defined')
      | map(attribute='qosSched.attributes.bw')
      | first | default('') | regex_replace('^20$', ''),
    'pfc_state': 'true' if [class] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('qosPfcPol', 'defined')
      | map(attribute='qosPfcPol.attributes.adminSt')
      | first == 'no' else '' | default(''),
    'no_drop_qos': [class] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('qosPfcPol', 'defined')
      | map(attribute='qosPfcPol.attributes.noDropCos')
      | first | default('') | replace('unspecified',''),
    'pfc_scope': [class] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('qosPfcPol', 'defined')
      | map(attribute='qosPfcPol.attributes.enableScope')
      | first | default('') | replace('tor',''),
    'congestion_algorithm': [class] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('qosCong', 'defined')
      | map(attribute='qosCong.attributes.algo')
      | first | default('') | replace('tail-drop',''),
    'ecn': 'true' if [class] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('qosCong', 'defined')
      | map(attribute='qosCong.attributes.ecn')
      | first == 'enabled' else '' | default(''),
    'forward_non_ecn': 'true' if [class] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('qosCong', 'defined')
      | map(attribute='qosCong.attributes.forwardNonEcn')
      | first == 'enabled' else '' | default(''),
    'wred_max_threshold': [class] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('qosCong', 'defined')
      | map(attribute='qosCong.attributes.wredMaxThreshold')
      | first | default('') | regex_replace('^100$',''),
    'wred_min_threshold': [class] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('qosCong', 'defined')
      | map(attribute='qosCong.attributes.wredMinThreshold')
      | first | default('') | regex_replace('^0$',''),
    'wred_probability': [class] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('qosCong', 'defined')
      | map(attribute='qosCong.attributes.wredProbability')
      | first | default('') | regex_replace('^0$',''),
    'weight': [class] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('qosCong', 'defined')
      | map(attribute='qosCong.attributes.wredWeight')
      | first | default('') | regex_replace('^0$',''),
    'minimum_buffer': [class] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('qosBuffer', 'defined')
      | map(attribute='qosBuffer.attributes.min')
      | first | default('') | regex_replace('^0$',''),
  }] %}
{% endfor %}
{%- set _= qosns.qos.__setitem__('qos_classes', qosclassns.qos_classes) -%}
{%- set _= accpolns.access_policies.__setitem__('qos', qosns.qos) -%}

{%- set vlpoolns = namespace(vlan_pools=[]) -%}
{%- for pool in infra_children | selectattr('fvnsVlanInstP', 'defined')
  | map(attribute='fvnsVlanInstP') | list
  | sort(attribute='attributes.name') | default([]) %}
  {%- set rangens = namespace(ranges=[]) %}
  {% for range in [pool] | selectattr('children', 'defined') | map(attribute='children')
    | flatten | selectattr('fvnsEncapBlk', 'defined')
    | map(attribute='fvnsEncapBlk') | sort(attribute='attributes.from')
    | default([]) %}
    {%- set rangens.ranges = rangens.ranges + [{
      'from': range.attributes.from | replace('vlan-', ''),
      'to': range.attributes.to | replace('vlan-', '')
        if range.attributes.to != range.attributes.from
        else '' | default(''),
      'allocation': range.attributes.allocMode | default('')
        | replace('inherit', ''),
      'role': range.attributes.role | default('') | replace('external', ''),
      'description': range.attributes.descr | default('') | regex_replace('^((?:.*\:.*))$', '"\\1"'),
    }] %}
  {% endfor %}
  {%- set vlpoolns.vlan_pools = vlpoolns.vlan_pools + [{
    'name': pool.attributes.name,
    'description': pool.attributes.descr | default('') | regex_replace('^((?:.*\:.*))$', '"\\1"'),
    'allocation': pool.attributes.allocMode | default('')
      | replace('static', ''),
    'ranges': rangens.ranges | default(''),
  }] %}
{% endfor %}
{%- set _= accpolns.access_policies.__setitem__('vlan_pools', vlpoolns.vlan_pools) -%}

{%- set dhcpns = namespace(dhcp_relay_policies=[]) %}
{%- for pol in infra_children | selectattr('dhcpRelayP', 'defined')
  | map(attribute='dhcpRelayP') | list %}
  {%- set provns = namespace(providers=[]) %}
  {% for prov in [pol] | selectattr('children', 'defined')
    | map(attribute='children') | flatten
    | selectattr('dhcpRsProv', 'defined') | map(attribute='dhcpRsProv')
    | list | default('') %}
    {%- set provns.providers = provns.providers + [{
      'ip': prov.attributes.addr,
      'type': 'external_epg' if '/out-' in prov.attributes.tDn else 'epg',
      'tenant': prov.attributes.tDn
        | regex_replace('uni\/tn-(.*?)\/(?:out-|ap-)(.*?)\/(?:instP-|epg-)(.*?)$', '\\1'),
      'application_profile': prov.attributes.tDn
        | regex_replace('uni\/tn-(.*?)\/(?:out-|ap-)(.*?)\/(?:instP-|epg-)(.*?)$', '\\2')
        if '/ap-' in prov.attributes.tDn else '' | default(''),
      'l3out': prov.attributes.tDn
        | regex_replace('uni\/tn-(.*?)\/(?:out-|ap-)(.*?)\/(?:instP-|epg-)(.*?)$', '\\2')
        if '/out-' in prov.attributes.tDn else '' | default(''),
      'endpoint_group': prov.attributes.tDn
        | regex_replace('uni\/tn-(.*?)\/(?:out-|ap-)(.*?)\/(?:instP-|epg-)(.*?)$', '\\3')
        if '/ap-' in prov.attributes.tDn else '' | default(''),
      'external_endpoint_group': prov.attributes.tDn
        | regex_replace('uni\/tn-(.*?)\/(?:out-|ap-)(.*?)\/(?:instP-|epg-)(.*?)$', '\\3')
        if '/out-' in prov.attributes.tDn else '' | default(''),
    }] %}
  {% endfor %}
  {%- set dhcpns.dhcp_relay_policies = dhcpns.dhcp_relay_policies + [{
    'name': pol.attributes.name,
    'description': pol.attributes.descr | default('') | regex_replace('^((?:.*\:.*))$', '"\\1"'),
    'providers': provns.providers | default(''),
  }] %}
{% endfor %}
{%- set _= accpolns.access_policies.__setitem__('dhcp_relay_policies', dhcpns.dhcp_relay_policies) -%}

{%- set lspgns = namespace(leaf_switch_policy_groups=[]) %}
{%- for pg in infra_children | selectattr('infraFuncP', 'defined')
  | map(attribute='infraFuncP') | selectattr('children', 'defined')
  | map(attribute='children') | flatten
  | selectattr('infraAccNodePGrp', 'defined')
  | map(attribute='infraAccNodePGrp') %}
  {%- set lspgns.leaf_switch_policy_groups = lspgns.leaf_switch_policy_groups + [{
    'name': pg.attributes.name,
    'forwarding_scale_policy': [pg] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('infraRsTopoctrlFwdScaleProfPol', 'defined')
      | map(attribute='infraRsTopoctrlFwdScaleProfPol.attributes.tnTopoctrlFwdScaleProfilePolName')
      | first | default(''),
    'bfd_ipv4_policy': [pg] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('infraRsBfdIpv4InstPol', 'defined')
      | map(attribute='infraRsBfdIpv4InstPol.attributes.tnBfdIpv4InstPolName')
      | first | default(''),
    'bfd_ipv6_policy': [pg] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('infraRsBfdIpv6InstPol', 'defined')
      | map(attribute='infraRsBfdIpv6InstPol.attributes.tnBfdIpv6InstPolName')
      | first | default(''),
  }] %}
{% endfor %}
{%- set _= accpolns.access_policies.__setitem__('leaf_switch_policy_groups',
    lspgns.leaf_switch_policy_groups) -%}

{%- set sspgns = namespace(spine_switch_policy_groups=[]) %}
{%- for pg in infra_children | selectattr('infraFuncP', 'defined')
  | map(attribute='infraFuncP') | selectattr('children', 'defined')
  | map(attribute='children') | flatten
  | selectattr('infraSpineAccNodePGrp', 'defined')
  | map(attribute='infraSpineAccNodePGrp') %}
  {%- set sspgns.spine_switch_policy_groups = sspgns.spine_switch_policy_groups + [{
    'name': pg.attributes.name,
    'lldp_policy': [pg] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('infraRsSpinePGrpToLldpIfPol', 'defined')
      | map(attribute='infraRsSpinePGrpToLldpIfPol.attributes.tnLldpIfPolName')
      | first | default(''),
    'bfd_ipv4_policy': [pg] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('infraRsSpineBfdIpv4InstPol', 'defined')
      | map(attribute='infraRsSpineBfdIpv4InstPol.attributes.tnBfdIpv4InstPolName')
      | first | default(''),
    'bfd_ipv6_policy': [pg] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('infraRsBfdIpv6InstPol', 'defined')
      | map(attribute='infraRsBfdIpv6InstPol.attributes.tnBfdIpv6InstPolName')
      | first | default(''),
  }] %}
{% endfor %}
{%- set _= accpolns.access_policies.__setitem__('spine_switch_policy_groups',
    sspgns.spine_switch_policy_groups) -%}
{% include "./access_interface_policies.nac.j2" %}
{% include "./access_policies/aaeps.nac.j2" %}
{% include "./access_policies/span.nac.j2" %}
{{ helper.remove_empty({'apic': {'access_policies': accpolns.access_policies}}) }}