{%- import 'macro_handler.j2' as helper -%}
{%- set srl3outsns = namespace(l3outs=[]) %}
{%- for l3o in [this_tenant]
  | selectattr('children', 'defined') | map(attribute='children') | flatten
  | selectattr('l3extOut', 'defined') | map(attribute='l3extOut')
  | selectattr('attributes.mplsEnabled', 'defined')
  | selectattr('attributes.mplsEnabled', 'equalto', 'yes') | list %}
  {#- Set node_profiles: -#}
  {%- set srmplsnpns = namespace(nps=[]) -%}
  {%- for np in [l3o]
    | selectattr('children', 'defined') | map(attribute='children') | flatten | list
    | selectattr('l3extLNodeP', 'defined') | map(attribute='l3extLNodeP')
    | list | default([]) if np %}
    {%- set nodens = namespace(nodes=[]) -%}
    {%- set intprofns = namespace(int_profs=[]) -%}
    {%- set bgpinfrapeersns = namespace(peers=[]) -%}
    {% for peer in [np]
      | selectattr('children', 'defined') | map(attribute='children') | flatten
      | selectattr('bgpInfraPeerP', 'defined')
      | map(attribute='bgpInfraPeerP')
      | default([]) | sort(attribute='attributes.addr') %}
      {%- set bgpinfrapeersns.peers = bgpinfrapeersns.peers + [{
        'ip': peer.attributes.addr,
        'description': peer.attributes.descr,
        'alias': peer.attributes.nameAlias,
        'remote_as': [peer]| selectattr('children', 'defined')
          | map(attribute='children') | flatten | list
          | selectattr('bgpAsP', 'defined')
          | map(attribute='bgpAsP.attributes.asn')
          | first | default(''),
        'allow_self_as': 'true' if 'allow-self-as' in peer.attributes.ctrl else '',
        'disable_peer_as_check': 'true' if 'dis-peer-as-check'
            in peer.attributes.ctrl else '',
        'bfd': 'true' if 'bfd' in peer.attributes.peerCtrl else '',
        'ttl': peer.attributes.ttl | regex_replace('^2$', ''),
        'local_as': [peer] | selectattr('children', 'defined')
            | map(attribute='children') | flatten | list
            | selectattr('bgpLocalAsnP', 'defined')
            | map(attribute='bgpLocalAsnP.attributes.localAsn')
            | first | default(''),
        'as_propagate': [peer] | selectattr('children', 'defined')
            | map(attribute='children') | flatten | list
            | selectattr('bgpLocalAsnP', 'defined')
            | map(attribute='bgpLocalAsnP.attributes.asnPropagate')
            | first | default('') | replace('none', ''),
        'peer_prefix_policy': [peer] | selectattr('children', 'defined')
            | map(attribute='children') | flatten | list
            | selectattr('bgpRsPeerPfxPol', 'defined')
            | map(attribute='bgpRsPeerPfxPol.attributes.tnBgpPeerPfxPolName')
            | first | default(''),
        'admin_state': 'false' if peer.attributes.adminSt == 'disabled' else ''
            | default(''),
      }]
      -%}
    {%- endfor -%}

    {%- for node in [np]
      | selectattr('children', 'defined') | map(attribute='children') | flatten
      | selectattr('l3extRsNodeL3OutAtt', 'defined')
      | map(attribute='l3extRsNodeL3OutAtt')
      | default([]) | sort(attribute='attributes.tDn') -%}

      {%- set nodens.nodes = nodens.nodes + [{
        'node_id': node.attributes.tDn
          | regex_replace('^topology/[^/]+/node-([0-9]+)$', '\\1'),
        'pod_id': node.attributes.tDn
          | regex_replace('^topology/pod-(\d{1,2})/node-[0-9]+$', '\\1')
          | default('') | regex_replace('^1$', ''),
        'router_id': node.attributes.rtrId,
        'bgp_evpn_loopback': [node] | selectattr('children', 'defined')
          | map(attribute='children') | flatten
          | selectattr('l3extLoopBackIfP', 'defined')
          | map(attribute='l3extLoopBackIfP.attributes.addr') | first
          | default('' ),
        'mpls_transport_loopback': [node] | selectattr('children', 'defined')
          | map(attribute='children') | flatten
          | selectattr('l3extLoopBackIfP', 'defined')
          | map(attribute='l3extLoopBackIfP')
          | selectattr('children', 'defined')
          | map(attribute='children') | flatten
          | selectattr('mplsNodeSidP', 'defined')
          | map(attribute='mplsNodeSidP.attributes.loopbackAddr') | first
          | default('' ),
        'segment_id': [node] | selectattr('children', 'defined')
          | map(attribute='children') | flatten
          | selectattr('l3extLoopBackIfP', 'defined')
          | map(attribute='l3extLoopBackIfP')
          | selectattr('children', 'defined')
          | map(attribute='children') | flatten
          | selectattr('mplsNodeSidP', 'defined')
          | map(attribute='mplsNodeSidP.attributes.sidoffset') | first
          | default('' ),
      }] -%}
    {% endfor -%}
    {% for int_prof in [np]
      | selectattr('children', 'defined') | map(attribute='children') | flatten | list
      | selectattr('l3extLIfP', 'defined') | map(attribute='l3extLIfP')
      | default([]) | sort(attribute='attributes.name') %}
      {%- set interfacesns = namespace(interfaces=[]) %}
      {%- set interface_profiles = [int_prof] | selectattr('children', 'defined')
        | map(attribute='children') | flatten | list
        | selectattr('l3extRsPathL3OutAtt', 'defined')
        | map(attribute='l3extRsPathL3OutAtt')
        +
        [int_prof] | selectattr('children', 'defined')
        | map(attribute='children') | flatten | list
        | selectattr('l3extVirtualLIfP', 'defined')
        | map(attribute='l3extVirtualLIfP')
        | default([])
      %}
      {#- Physical Interface -#}
      {%- for intf in interface_profiles %}
        {#- Set Interface Paths -#}
        {%- set interfacepathsns = namespace(paths=[]) %}
        {% for path in [intf] | selectattr('children', 'defined')
          | map(attribute='children' ) | flatten
          | selectattr('l3extRsDynPathAtt', 'defined')
          | map(attribute='l3extRsDynPathAtt')
          | list | default('') %}
          {%- set interfacepathsns.paths = interfacepathsns.paths + [{
            'floating_ip': path.attributes.floatingAddr,
            'physical_domain': path.attributes.tDn
              | replace('uni/phys-', '') if 'uni/phys-' in path.attributes.tDn
              else '',
            'vmware_vmm_domain': path.attributes.tDn
              | replace('uni/vmmp-VMware/dom-', '') if 'vmmp-VMware/dom-'
              in path.attributes.tDn else '',
            'vlan': path.attributes.encap
              | replace('vlan-', '')
              | replace('unspecified', '')
              | replace('unknown', ''),
            'elag': '',
          }] %}
        {% endfor %}
        {#- Set Interface Peers -#}
        {%- set interfacepeers = namespace(peers=[]) -%}
        {% for peer in [intf] | selectattr('children', 'defined')
          | map(attribute='children' ) | flatten
          | selectattr('bgpPeerP', 'defined') | map(attribute='bgpPeerP')
          | list | sort(attribute='attributes.addr') | default('')
          %}
          {%- set interfacepeers.peers = interfacepeers.peers + [{
            'ip': peer.attributes.addr | regex_replace('::$', '::0'),
            'alias': peer.attributes.nameAlias | default(''),
            'description': peer.attributes.descr | default('') | regex_replace('^((?:.*\:.*))$', '"\\1"'),
            'remote_as': [peer] | selectattr('children', 'defined')
              | map(attribute='children') | flatten
              | selectattr('bgpAsP', 'defined')
              | map(attribute='bgpAsP.attributes.asn')
              | first | default(''),
            'allow_self_as': 'true' if 'allow-self-as' in peer.attributes.ctrl else '',
            'send_community': 'true' if 'send-com' in peer.attributes.ctrl else '',
            'send_ext_community': 'true' if 'send-ext-com'
              in peer.attributes.ctrl else '',
            'password': peer.attributes.password | default(''),
            'bfd': 'true' if 'bfd' in peer.attributes.peerCtrl else '',
            'unicast_address_family': 'false' if 'af-ucast'
              not in peer.attributes.addrTCtrl else '',
            'admin_state': 'false' if peer.attributes.adminSt == 'disabled' else ''
              | default(''),
            'local_as': [peer] | selectattr('children', 'defined')
              | map(attribute='children') | flatten
              | selectattr('bgpLocalAsnP', 'defined')
              | map(attribute='bgpLocalAsnP.attributes.localAsn')
              | first | default(''),
            'peer_prefix_policy': [peer] | selectattr('children', 'defined')
              | map(attribute='children') | flatten
              | selectattr('bgpRsPeerPfxPol', 'defined')
              | map(attribute='bgpRsPeerPfxPol.attributes.tnBgpPeerPfxPolName')
              | first | default(''),
            'as_propagate': [peer] | selectattr('children', 'defined')
              | map(attribute='children') | flatten
              | selectattr('bgpLocalAsnP', 'defined')
              | map(attribute='bgpLocalAsnP.attributes.asnPropagate')
              | first | default('') | replace('none', ''),
            'export_route_control': [peer] | selectattr('children', 'defined')
              | map(attribute='children') | flatten
              | selectattr('bgpRsPeerToProfile', 'defined')
              | selectattr('bgpRsPeerToProfile.attributes.direction', 'match', 'export')
              | map(attribute='bgpRsPeerToProfile.attributes.tDn')
              | first | default('')
              | regex_replace('^uni/tn-.*/prof-(.*?)$', '\\1'),
            'disable_connected_check': 'true' if 'dis-conn-check'
              in peer.attributes.peerCtrl else '',
            'import_route_control': [peer] | selectattr('children', 'defined')
              | map(attribute='children') | flatten
              | selectattr('bgpRsPeerToProfile', 'defined')
              | selectattr('bgpRsPeerToProfile.attributes.direction', 'match', 'import')
              | map(attribute='bgpRsPeerToProfile.attributes.tDn')
              | first | default('')
              | regex_replace('^uni/tn-.*/prof-(.*?)$', '\\1'),
            'as_override': 'true' if 'as-override' in peer.attributes.ctrl else '',
            'disable_peer_as_check': 'true' if 'dis-peer-as-check'
              in peer.attributes.ctrl else '',
            'next_hop_self': 'true' if 'nh-self' in peer.attributes.ctrl else '',
            'ttl': peer.attributes.ttl | regex_replace('^1$', ''),
            'weight': peer.attributes.weight | replace('0', ''),
            'remove_all_private_as': 'true' if 'remove-all'
              in peer.attributes.privateASctrl else '',
            'remove_private_as': 'true' if 'remove-exclusive'
              in peer.attributes.privateASctrl else '',
            'replace_private_as_with_local_as': 'true' if 'replace-as'
              in peer.attributes.privateASctrl else '',
          }] -%}
        {% endfor %}
        {%- set interfacesns.interfaces = interfacesns.interfaces + [{
          'ip': intf.attributes.addr | replace('0.0.0.0', ''),
          'svi': 'true' if intf.attributes.ifInstT == 'ext-svi' else ''
            | default(''),
          'floating_svi': 'true' if [intf] | map(attribute='attributes.nodeDn')
            | first | default('') else '',
          'description': intf.attributes.descr,
          'vlan': intf.attributes.encap
            | regex_replace('^vlan-(\d+)$', '\\1') | default(''),
          'autostate': 'true' if intf.attributes.autostate == 'enabled' else '' | default(''),
          'mac': intf.attributes.mac | default('') | replace('00:22:BD:F8:19:FF', ''),
          'mode': intf.attributes.mode | replace('regular', ''),
          'mtu': intf.attributes.mtu | default('') | replace('inherit', ''),
          'pod_id': [intf] | map(attribute='attributes.tDn')
            | first
            | regex_replace(
            '^topology\/pod-(\d+)\/(?:prot)?paths-(\d+)(?:-(\d+))?\/pathep-\[((?:eth)(\d)\/(\d+)(?:\/(\d)+)?|.*)]$',
              '\\1')
            | regex_replace('^1$', '')
              if [intf] | selectattr('attributes.tDn', 'defined')
                | map(attribute='attributes.tDn')
              else
                [intf] | selectattr('attributes.nodeDn', 'defined')
                | map(attribute='attributes.nodeDn')
                | first
                | regex_replace('^topology\/pod-(\d+)\/node-(\d+)$', '\\1')
                | regex_replace('^1$', ''),
          'node_id': [intf] | selectattr('attributes.tDn', 'defined')
            | map(attribute='attributes.tDn')
            | first | regex_replace(
            '^topology\/pod-(\d+)\/(?:prot)?paths-(\d+)(?:-(\d+))?\/pathep-\[((?:eth)(\d)\/(\d+)(?:\/(\d)+)?|.*)]$',
              '\\2')
              if [intf] | selectattr('attributes.tDn', 'defined')
                | map(attribute='attributes.tDn')
              else
                [intf] | selectattr('attributes.nodeDn', 'defined')
                | map(attribute='attributes.nodeDn')
                | first
                | regex_replace('^topology\/pod-(\d+)\/node-(\d+)$', '\\2'),
          'node2_id': [intf] | map(attribute='attributes.tDn')
            | first | default('')
            | regex_replace(
            '^topology\/pod-(\d+)\/(?:prot)?paths-(\d+)(?:-(\d+))?\/pathep-\[((?:eth)(\d)\/(\d+)(?:\/(\d)+)?|.*)]$',
              '\\3'),
          'channel': [intf] | map(attribute='attributes.tDn')
            | first | default('')
            | regex_replace(
            '^topology\/pod-(\d+)\/(?:prot)?paths-(\d+)(?:-(\d+))?\/pathep-\[((?:eth)(\d)\/(\d+)(?:\/(\d)+)?|.*)]$',
              '\\4')
            | regex_replace('^eth.*', ''),
          'module': [intf] | map(attribute='attributes.tDn')
            | first | default('')
            | regex_replace(
            '^topology\/pod-(\d+)\/(?:prot)?paths-(\d+)(?:-(\d+))?\/pathep-\[((?:eth)(\d)\/(\d+)(?:\/(\d)+)?|.*)]$',
              '\\5')
            | regex_replace('^1$', ''),
          'port': [intf] | map(attribute='attributes.tDn')
            | first | default('')
            | regex_replace(
            '^topology\/pod-(\d+)\/(?:prot)?paths-(\d+)(?:-(\d+))?\/pathep-\[((?:eth)(\d)\/(\d+)(?:\/(\d)+)?|.*)]$',
              '\\6'),
          'sub_port': [intf] | map(attribute='attributes.tDn')
            | first | default('')
            | regex_replace(
            '^topology\/pod-(\d+)\/(?:prot)?paths-(\d+)(?:-(\d+))?\/pathep-\[((?:eth)(\d)\/(\d+)(?:\/(\d)+)?|.*)]$',
              '\\7'),
          'ip_a': [intf] | selectattr('children', 'defined')
            | map(attribute='children') | flatten | list
            | selectattr('l3extMember', 'defined')
            | selectattr('l3extMember.attributes.side', '==', 'A')
            | map(attribute='l3extMember.attributes.addr')
            | first | default(''),
          'ip_b': [intf] | selectattr('children', 'defined')
            | map(attribute='children') | flatten | list
            | selectattr('l3extMember', 'defined')
            | selectattr('l3extMember.attributes.side', '==', 'B')
            | map(attribute='l3extMember.attributes.addr')
            | first | default(''),
          'ip_shared': [intf] | selectattr('children', 'defined')
            | map(attribute='children') | flatten | list
            | selectattr('l3extMember', 'defined')
            | selectattr('l3extMember.attributes.side', '==', 'A')
            | map(attribute='l3extMember')
            | selectattr('children', 'defined') | map(attribute='children') | flatten
            | selectattr('l3extIp', 'defined')
            | map(attribute='l3extIp.attributes.addr')
            | first | default(''),
          'link_local_address': intf.attributes.link_local_address | default('')
          | replace('::', '') | replace('0.0.0.0', ''),
          'multipod_direct': 'true' if intf | map(attribute='attributes.isMultiPodDirect') == 'yes' else ''
            | default(''),
          'scope': 'vrf' if intf.attributes.encapScope == 'ctx' else ''
            | default(''),
          'micro_bfd_destination_ip': '',
          'micro_bfd_start_timer': '',
          'bgp_peers': interfacepeers.peers | default([]),
          'paths': interfacepathsns.paths | default([]),
        }] -%}
      {% endfor %}
      {%- set intprofns.int_profs = intprofns.int_profs + [{
      'name': int_prof.attributes.name,
      'description': int_prof.attributes.descr,
      'alias': int_prof.attributes.nameAlias,
      'bfd_policy': [int_prof]
        | selectattr('children', 'defined') | map(attribute='children') | flatten
        | selectattr('bfdIfP', 'defined') | map(attribute='bfdIfP')
        | selectattr('children', 'defined') | map(attribute='children') | flatten
        | selectattr('bfdRsIfPol', 'defined')
        | map(attribute='bfdRsIfPol.attributes.tnBfdIfPolName')
        | first | default(''),
      'interfaces': interfacesns.interfaces | default([]),
      }] -%}
    {% endfor %}
    {%- set srmplsnpns.nps = srmplsnpns.nps + [{
      'name': np.attributes.name,
      'alias': np.attributes.nameAlias | default(''),
      'description': np.attributes.descr | default('') | regex_replace('^((?:.*\:.*))$', '"\\1"'),
      'mpls_custom_qos_policy': [np] | selectattr('children', 'defined')
        | map(attribute='children') | flatten
        | selectattr('l3extRsLNodePMplsCustQosPol', 'defined')
        | map(attribute='l3extRsLNodePMplsCustQosPol.attributes.tDn') | first
        | default('')
        | replace('uni/tn-infra/qosmplscustom-', ''),
      'bfd_multihop_node_policy': [np] | selectattr('children', 'defined')
        | map(attribute='children') | flatten
        | selectattr('bfdMhNodeP', 'defined')
        | map(attribute='bfdMhNodeP') | selectattr('children', 'defined')
        | map(attribute='children') | flatten
        | selectattr('bfdRsMhNodePol', 'defined')
        | map(attribute='bfdRsMhNodePol.attributes.tnBfdMhNodePolName') | first
        | default(''),
      'nodes': nodens.nodes | default([]),
      'interface_profiles': intprofns.int_profs | default([]),
      'evpn_connectivity': bgpinfrapeersns.peers | default([]),
    }] -%}
  {% endfor -%}

  {#- Set external_endpoint_groups: -#}
  {%- set srmplseepgsns = namespace(eepgs=[]) -%}
  {% for eepg in [l3o] | selectattr('children', 'defined')
    | map(attribute='children') | flatten
    | selectattr('l3extInstP', 'defined') | map(attribute='l3extInstP')
    | default('') %}
    {%- set eepgsubnetns = namespace(subnets=[])%}
    {% for subnet in [eepg] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('l3extSubnet', 'defined') | map(attribute='l3extSubnet')
      | list | default([]) | sort(attribute='attributes.ip') %}
      {%- set eepgsubnetns.subnets = eepgsubnetns.subnets + [{
        'prefix': subnet.attributes.ip,
        'name': subnet.attributes.name | default(''),
        'description': subnet.attributes.descr | default('') | regex_replace('^((?:.*\:.*))$', '"\\1"'),
        'alias': subnet.attributes.alias | default(''),
        'aggregate_shared_route_control': 'true' if 'shared-rtctrl'
            in subnet.attributes.aggregate else '',
        'route_leaking': 'true' if 'shared-rtctrl'
            in subnet.attributes.scope else ''
            | default(''),
        'security': 'true' if 'shared-security'
            in subnet.attributes.scope else ''
            | default(''),
      }] %}
    {% endfor %}
    {%- set contractns = namespace(contracts={}) %}
    {%- set _=contractns.contracts.__setitem__('providers', [eepg]
      | selectattr('children', 'defined') | map(attribute='children')
      | flatten | selectattr('fvRsProv', 'defined')
      | map(attribute='fvRsProv.attributes.tnVzBrCPName')
      | list | default('')) %}
    {%- set _=contractns.contracts.__setitem__('consumers', [eepg]
      | selectattr('children', 'defined') | map(attribute='children')
      | flatten | selectattr('fvRsCons', 'defined')
      | map(attribute='fvRsCons.attributes.tnVzBrCPName')
      | list | default('')) %}
    {%- set _=contractns.contracts.__setitem__('imported_consumers', [eepg]
      | selectattr('children', 'defined') | map(attribute='children')
      | flatten | selectattr('fvRsConsIf', 'defined')
      | map(attribute='fvRsConsIf.attributes.tnVzCPIfName')
      | list | default('')) %}
    {%- set srmplseepgsns.eepgs = srmplseepgsns.eepgs + [{
      'name': eepg.attributes.name,
      'description': eepg.attributes.descr | default('') | regex_replace('^((?:.*\:.*))$', '"\\1"'),
      'alias': eepg.attributes.alias | default(''),
      'preferred_group': 'true' if eepg.attributes.prefGrMemb == 'include'
        else '' | default(''),
      'target_dscp': eepg.attributes.targetDscp | default('')
        | replace('unspecified', ''),
      'qos_class': eepg.attributes.prio | default('')
        | replace('unspecified', ''),
      'subnets': eepgsubnetns.subnets | default([]),
      'contracts': contractns.contracts | default([]),
    }] %}
  {%- endfor -%}

  {%- set srmplsl3outsns = namespace(l3outs=[]) -%}
  {% for srmplsl3o in [l3o]
    | selectattr('children', 'defined') | map(attribute='children') | flatten
    | selectattr('l3extConsLbl', 'defined') | map(attribute='l3extConsLbl')
    | sort(attribute='attributes.name')
    | default([]) %}
    {#- Create List of sr_mpls_infra_l3out External EPGs -#}
    {%- set srmpl3_infra_eepgns = namespace(eepgs=[]) %}
    {% for infra_eepg in [srmplsl3o] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('l3extRsLblToInstP', 'defined')
      | map(attribute='l3extRsLblToInstP')
      | map(attribute='attributes.tDn')
      | default([]) %}
      {%- set srmpl3_infra_eepgns.eepgs = srmpl3_infra_eepgns.eepgs + [
        infra_eepg | regex_replace('^(.*?)\/instP-(.*)$', '\\2')
      ] %}
    {% endfor %}
    {%- set srmplsl3outsns.l3outs = srmplsl3outsns.l3outs + [{
      'name': srmplsl3o.attributes.name,
      'inbound_route_map': [srmplsl3o] | selectattr('children', 'defined')
        | map(attribute='children') | flatten
        | selectattr('l3extRsLblToProfile', 'defined')
        | map(attribute='l3extRsLblToProfile')
        | selectattr('attributes.direction', '==', 'import')
        | map(attribute='attributes.tDn') | first
        | default('') | regex_replace('^uni\/.*\/prof-(.*?)$', '\\1'),
      'outbound_route_map': [srmplsl3o] | selectattr('children', 'defined')
        | map(attribute='children') | flatten
        | selectattr('l3extRsLblToProfile', 'defined')
        | map(attribute='l3extRsLblToProfile')
        | selectattr('attributes.direction', '==', 'export')
        | map(attribute='attributes.tDn') | first
        | default('') | regex_replace('^uni\/.*\/prof-(.*?)$', '\\1'),
      'external_endpoint_groups': srmpl3_infra_eepgns.eepgs | default([]),
    }] %}
  {% endfor %}
  {%- set srl3outsns.l3outs = srl3outsns.l3outs + [{
    'name': l3o.attributes.name,
    'alias': l3o.attributes.nameAlias | default(''),
    'description': l3o.attributes.descr | default('') | regex_replace('^((?:.*\:.*))$', '"\\1"'),
    'import_route_control_enforcement': 'true' if 'import' in l3o.attributes.enforceRtctrl else ''
      | default(''),
    'export_route_control_enforcement': 'false' if 'export' not in l3o.attributes.enforceRtctrl else ''
      | default(''),
    'target_dscp': l3o.attributes.targetDscp | default('')
      | replace('unspecified', ''),
    'vrf': [l3o] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('l3extRsEctx', 'defined') | map(attribute='l3extRsEctx')
      | map(attribute='attributes.tnFvCtxName') | first
      | default(''),
    'domain': [l3o] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('l3extRsL3DomAtt', 'defined')
      | map(attribute='l3extRsL3DomAtt')
      | map(attribute='attributes.tDn') | first
      | default('') | replace('uni/l3dom-', ''),
    'transport_data_plane': 'mpls' if  [l3o]
      | selectattr('children', 'search', 'segment-routing-disable')
      | default('') else '',
    'node_profiles': srmplsnpns.nps | default([]),
    'external_endpoint_groups': srmplseepgsns.eepgs if item != 'infra' else []
      | default([]),
    'sr_mpls_infra_l3outs': srmplsl3outsns.l3outs | default([]),
  }] %}
{% endfor %}
{%- set _=tenantns.tenant_policies.__setitem__('sr_mpls_l3outs', srl3outsns.l3outs ) %}