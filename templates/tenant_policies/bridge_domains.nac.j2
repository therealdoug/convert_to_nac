{% import 'macro_handler.j2' as helper -%}
{% set bdns = namespace(bridge_domains=[]) -%}
{% for bd in this_tenant.children | selectattr('fvBD', 'defined')
      | map(attribute='fvBD') | default([]) | flatten
      | sort(attribute='attributes.name') %}
  {% set subnetns = namespace(subnets=[]) %}
  {% for subnet in bd.children | selectattr('fvSubnet', 'defined')
    | map(attribute='fvSubnet') %}
    {% set subnetns.subnets = subnetns.subnets + [{
      'ip': subnet.attributes.ip,
      'description': subnet.attributes.descr | default(''),
      'alias': subnet.attributes.nameAlias | default(''),
      'primary_ip': 'true' if 'yes' in subnet.attributes.preferred
        | default('') else '',
      'name': subnet.attributes.name | default(''),
      'virtual': 'true' if 'yes' in subnet.attributes.virtual
        | default('') else '',
      'public': 'true' if 'public' in subnet.attributes.scope
        | default('') else '',
      'shared': 'true' if 'shared' in subnet.attributes.scope
        | default('') else '',
      'igmp_querier': 'true' if 'querier' in subnet.attributes.ctrl
        | default('') else '',
      'nd_ra_prefix': 'false' if 'nd' not in subnet.attributes.ctrl
        | default('') else '',
      'no_default_gateway': 'true' if 'no-default-gateway'
        in subnet.attributes.ctrl
        | default('') else '',
    }] %}
  {% endfor -%}

  {% set dhcpns = namespace(dhcp_labels=[]) %}
  {% for label in [bd] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('dhcpLbl', 'defined') | map(attribute='dhcpLbl')
      | default([])
      | sort(attribute='attributes.name') %}
    {% set dhcpns.dhcp_labels = dhcpns.dhcp_labels + [{
      'dhcp_relay_policy': label.attributes.name,
      'dhcp_option_policy': label | selectattr('children', 'defined')
        | map(attribute='children') | flatten
        | selectattr('dhcpRsDhcpOptionPol', 'defined')
        | map(attribute='dhcpRsDhcpOptionPol.attributes.tnDhcpOptionPolName')
        | default(''),
      'scope': label.attributes.owner | default('')
        | replace('tenant', ''),
    }] %}
  {% endfor -%}
  {% set bdns.bridge_domains = bdns.bridge_domains + [{
    'name': bd.attributes.name,
    'description': bd.attributes.descr | default(''),
    'alias': bd.attributes.nameAlias | default(''),
    'vrf': bd.children | selectattr('fvRsCtx', 'defined')
      | map(attribute='fvRsCtx.attributes.tnFvCtxName')
      | first | default(''),
    'arp_flooding': 'false' if 'no' in bd.attributes.arpFlood
      | default('') else '',
    'advertise_host_routes': 'true' if 'yes' in bd.attributes.hostBasedRouting
      | default('') else '',
    'ip_dataplane_learning': 'false' if 'no' in bd.attributes.ipLearning
      | default('') else '',
    'mac': bd.attributes.mac | default('') | replace('00:22:BD:F8:19:FF', ''),
    'virtual_mac': bd.attributes.vmac | default('')
      | replace('not-applicable', ''),
    'unicast_routing': 'false' if 'no' in bd.attributes.unicastRoute
      | default('') else '',
    'multi_destination_flooding': bd.attributes.multiDstPktAct | default('')
      | replace('bd-flood', ''),
    'unknown_unicast': bd.attributes.unkMacUcastAct | default('')
      | replace('proxy', ''),
    'unknown_ipv4_multicast': bd.attributes.unkMcastAct | default('')
      | regex_replace('^flood$', ''),
    'subnets': subnetns.subnets | default([]),
    'l3outs': bd | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('fvRsBDToOut', 'defined')
      | map(attribute='fvRsBDToOut')
      | default([]),
    'dhcp_labels': dhcpns.dhcp_labels | default([]),
  }] %}
{% endfor -%}
{{ 'bridge_domains:' | indent(6, first=True) if bdns.bridge_domains }}
{{ helper.remove_empty(bdns.bridge_domains) | indent(8, first=True)
  if bdns.bridge_domains }}