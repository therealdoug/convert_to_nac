{% import 'macro_handler.j2' as helper -%}
{%- set bdns = namespace(bridge_domains=[]) -%}
{%- for bd in this_tenant.children | selectattr('fvBD', 'defined')
      | map(attribute='fvBD') | default([]) | flatten
      | sort(attribute='attributes.name') %}
  {%- set subnetns = namespace(subnets=[]) -%}
  {% for subnet in bd.children | selectattr('fvSubnet', 'defined')
    | map(attribute='fvSubnet') %}
    {%- set subnetns.subnets = subnetns.subnets + [{
      'ip': subnet.attributes.ip,
      'description': subnet.attributes.descr | default('') | regex_replace('^(.*[:*].*)$', '"\\1"'),
      'alias': subnet.attributes.nameAlias | default(''),
      'primary_ip': 'true' if 'yes' in subnet.attributes.preferred
        | default('') else '',
      'name': subnet.attributes.name | default(''),
      'virtual': 'true' if 'yes' in subnet.attributes.virtual
        | default('') else '',
      'public': 'true' if 'public' in subnet.attributes.scope
        | default('') else '',
      'shared': 'true' if 'shared' in subnet.attributes.scope
        | default('') else '',
      'igmp_querier': 'true' if 'querier' in subnet.attributes.ctrl
        | default('') else '',
      'nd_ra_prefix': 'false' if 'nd' not in subnet.attributes.ctrl
        | default('') else '',
      'no_default_gateway': 'true' if 'no-default-gateway'
        in subnet.attributes.ctrl
        | default('') else '',
      'nd_ra_prefix_policy': [subnet] | selectattr('children', 'defined')
        | map(attribute='children') | flatten
        | selectattr('fvRsNdPfxPol', 'defined')
        | map(attribute='fvRsNdPfxPol.attributes.tnNdPfxPolName')
        | first | default(''),
      'ip_dataplane_learning': 'false' if
        subnet.attributes.ipDPLearning | default('') == 'disabled'
         else '',
    }] -%}
  {% endfor -%}

  {%- set dhcpns = namespace(dhcp_labels=[]) %}
  {%- for label in [bd] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('dhcpLbl', 'defined') | map(attribute='dhcpLbl')
      | default([])
      | sort(attribute='attributes.name') -%}
    {%- set dhcpns.dhcp_labels = dhcpns.dhcp_labels + [{
      'dhcp_relay_policy': label.attributes.name,
      'dhcp_option_policy': label | selectattr('children', 'defined')
        | map(attribute='children') | flatten
        | selectattr('dhcpRsDhcpOptionPol', 'defined')
        | map(attribute='dhcpRsDhcpOptionPol.attributes.tnDhcpOptionPolName')
        | default(''),
      'scope': label.attributes.owner | default('')
        | replace('tenant', ''),
    }] -%}
  {% endfor -%}
  {%- set bdns.bridge_domains = bdns.bridge_domains + [{
    'name': bd.attributes.name,
    'description': bd.attributes.descr | default('') | regex_replace('^(.*[:*].*)$', '"\\1"'),
    'alias': bd.attributes.nameAlias | default(''),
    'vrf': bd.children | selectattr('fvRsCtx', 'defined')
      | map(attribute='fvRsCtx.attributes.tnFvCtxName')
      | first | default(''),
    'arp_flooding': 'false' if 'no' in bd.attributes.arpFlood
      | default('') else '',
    'advertise_host_routes': 'true' if 'yes' in bd.attributes.hostBasedRouting
      | default('') else '',
    'ip_dataplane_learning': 'false' if 'no' in bd.attributes.ipLearning
      | default('') else '',
    'clear_remote_mac_entries': 'true' if 'yes' in bd.attributes.epClear
      | default('')  else '',
    'limit_ip_learn_to_subnets': 'false' if 'no' in bd.attributes.limitIpLearnToSubnets
      | default('')  else '',
    'mac': bd.attributes.mac | default('') | replace('00:22:BD:F8:19:FF', ''),
    'virtual_mac': bd.attributes.vmac | default('')
      | replace('not-applicable', ''),
    'ep_move_detection': 'true' if 'garp' in bd.attributes.epMoveDetectode
      | default('')  else '',
    'l3_multicast': 'true' if 'yes' in bd.attributes.mcastAllow
      | default('')  else '',
    'multicast_arp_drop': 'true' if 'yes' in bd.attributes.mcastARPDrop
      | default('')  else '',
    'pim_source_filter': [bd]
      | selectattr('children', 'defined') | map(attribute='children') | flatten
      | selectattr('pimBDP', 'defined') | map(attribute='pimBDP')
      | selectattr('children', 'defined') | map(attribute='children') | flatten
      | selectattr('pimBDFilterPol', 'defined') | map(attribute='pimBDFilterPol')
      | selectattr('children', 'defined') | map(attribute='children') | flatten
      | selectattr('pimBDSrcFilterPol', 'defined') | map(attribute='pimBDSrcFilterPol')
      | selectattr('children', 'defined') | map(attribute='children') | flatten
      | selectattr('rtdmcRsFilterToRtMapPol', 'defined')
      | map(attribute='rtdmcRsFilterToRtMapPol.attributes.tDn')
      | first | default('') | regex_replace('^.*rtmap-(.*?)$', '\\1'),
    'pim_destination_filter': [bd]
      | selectattr('children', 'defined') | map(attribute='children') | flatten
      | selectattr('pimBDP', 'defined') | map(attribute='pimBDP')
      | selectattr('children', 'defined') | map(attribute='children') | flatten
      | selectattr('pimBDFilterPol', 'defined') | map(attribute='pimBDFilterPol')
      | selectattr('children', 'defined') | map(attribute='children') | flatten
      | selectattr('pimBDDestFilterPol', 'defined') | map(attribute='pimBDDestFilterPol')
      | selectattr('children', 'defined') | map(attribute='children') | flatten
      | selectattr('rtdmcRsFilterToRtMapPol', 'defined')
      | map(attribute='rtdmcRsFilterToRtMapPol.attributes.tDn')
      | first | default('') | regex_replace('^.*rtmap-(.*?)$', '\\1'),
    'unicast_routing': 'false' if 'no' in bd.attributes.unicastRoute
      | default('') else '',
    'multi_destination_flooding': bd.attributes.multiDstPktAct | default('')
      | regex_replace('^bd-flood$', ''),
    'unknown_unicast': bd.attributes.unkMacUcastAct | default('')
      | replace('flood', ''),
    'unknown_ipv4_multicast': bd.attributes.unkMcastAct | default('')
      | regex_replace('^flood$', ''),
    'unknown_ipv6_multicast': bd.attributes.v6unkMcastAct | default('')
      | regex_replace('^flood$', ''),
    'igmp_interface_policy': [bd] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('igmpIfP', 'defined') | map(attribute='igmpIfP')
      | selectattr('children', 'defined') | map(attribute='children') | flatten
      | selectattr('igmpRsIfPol', 'defined')
      | map(attribute='igmpRsIfPol.attbributes.tDn') | first
      | default('') | regex_replace('^.*igmpIfPol-(.*?)$', '\\1'),
    'igmp_snooping_policy': [bd] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('fvRsIgmpsn', 'defined')
      | map(attribute='fvRsIgmpsn.attributes.tnIgmpSnoopPolName') | first
      | default(''),
    'nd_interface_policy': [bd] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('fvRsBDToNdP', 'defined')
      | map(attribute='fvRsBDToNdP.attributes.tnNdIfPolName') | first
      | default(''),
    'endpoint_retention_policy': [bd] | selectattr('children', 'defined')
      | map(attribute='children') | flatten
      | selectattr('fvRsBdToEpRet', 'defined')
      | map(attribute='fvRsBdToEpRet.attributes.fvRsBdToEpRet') | first
      | default(''),
    'subnets': subnetns.subnets | default([]),
    'l3outs': bd.children | selectattr('fvRsBDToOut', 'defined')
      | map(attribute='fvRsBDToOut.attributes.tnL3extOutName')
      | default(''),
    'dhcp_labels': dhcpns.dhcp_labels | default([]),
  }] -%}
{%- endfor -%}
{%- set _=tenantns.tenant_policies.__setitem__('bridge_domains', bdns.bridge_domains ) %}
